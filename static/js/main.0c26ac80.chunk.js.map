{"version":3,"sources":["components/todo-item.js","components/input-todo.js","components/todo-list.js","App.js","index.js"],"names":["TodoItem","props","task","deleteTask","editTask","updateStatus","className","id","index","type","checked","status","onChange","onDoubleClick","e","taskElement","target","contentEditable","classList","add","addEventListener","keyCode","description","onClick","InputTodo","addTask","onSubmit","placeholder","TodoList","useState","tasks","setTasks","taskId","Number","parentElement","split","prevTasks","filter","remove","taskDescription","textContent","find","x","localStorage","setItem","JSON","stringify","items","item","useEffect","fetchApi","a","fetch","response","json","initialTasks","slice","map","old","title","completed","parse","getItem","preventDefault","inputElement","querySelector","value","newTask","indexes","maxIndex","length","Math","max","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0c26ac80.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nconst TodoItem = (props) => {\n  const {\n    task, deleteTask, editTask, updateStatus,\n  } = props;\n\n  const makeEditable = (e) => {\n    const taskElement = e.target;\n    taskElement.contentEditable = true;\n    taskElement.classList.add('white-bg');\n    taskElement.addEventListener('keydown', (e) => {\n      if (e.keyCode === 13) {\n        editTask(e);\n      }\n    });\n  };\n\n  return (\n    <li className=\"todo-item\" id={`item-${task.index}`}>\n      <input className=\"item-status\" key={task.status} type=\"checkbox\" checked={task.status} onChange={updateStatus} />\n      <span className=\"item-description\" onDoubleClick={makeEditable}>\n        {task.description}\n      </span>\n      <button className=\"item-delete\" type=\"button\" onClick={deleteTask}> Delete </button>\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  task: PropTypes.shape({\n    description: PropTypes.string.isRequired,\n    status: PropTypes.bool.isRequired,\n    index: PropTypes.number.isRequired,\n  }).isRequired,\n  deleteTask: PropTypes.func.isRequired,\n  editTask: PropTypes.func.isRequired,\n  updateStatus: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import PropTypes from 'prop-types';\n\nconst InputTodo = (props) => {\n  const { addTask } = props;\n  return (\n    <form id=\"input-todo\" onSubmit={addTask}>\n      <input type=\"text\" placeholder=\"New Task\" />\n      <button type=\"submit\"> Add Task </button>\n    </form>\n  );\n};\n\nInputTodo.propTypes = {\n  addTask: PropTypes.func.isRequired,\n};\n\nexport default InputTodo;\n","import { useState, useEffect } from 'react';\nimport TodoItem from './todo-item';\nimport InputTodo from './input-todo';\nimport './todo-list.css';\n\nconst TodoList = () => {\n  const [tasks, setTasks] = useState([]);\n\n  const deleteTask = (e) => {\n    const taskId = Number(e.target.parentElement.id.split('-')[1]);\n    setTasks((prevTasks) => prevTasks.filter((task) => (task.index !== taskId)));\n  };\n\n  const addTask = (e) => {\n    e.preventDefault();\n    const inputElement = e.target.querySelector('input');\n    const taskDescription = inputElement.value;\n    inputElement.value = '';\n\n    const newTask = { description: taskDescription, status: false };\n    setTasks((prevTasks) => {\n      const indexes = prevTasks.map((x) => x.index);\n      const maxIndex = prevTasks.length === 0 ? 0 : Math.max(...indexes);\n      return [...prevTasks, { ...newTask, index: maxIndex + 1 }];\n    });\n  };\n\n  const editTask = (e) => {\n    const taskElement = e.target;\n    taskElement.contentEditable = false;\n    taskElement.classList.remove('white-bg');\n    const taskDescription = taskElement.textContent;\n    const taskId = Number(taskElement.parentElement.id.split('-')[1]);\n\n    setTasks((prevTasks) => {\n      const task = prevTasks.find((x) => x.index === taskId);\n      task.description = taskDescription;\n      return prevTasks;\n    });\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  };\n\n  const updateStatus = (e) => {\n    const taskId = Number(e.target.parentElement.id.split('-')[1]) - 1;\n    const items = [...tasks];\n    const item = { ...items[taskId] };\n    item.status = !item.status;\n    items[taskId] = item;\n    setTasks(items);\n  };\n\n  // Load from local storage\n  useEffect(() => {\n    const url = 'https://jsonplaceholder.typicode.com/todos';\n    const fetchApi = async () => {\n      const response = await fetch(url);\n      const json = await response.json();\n      const initialTasks = json.slice(0, 10).map((old) => (\n        { description: old.title, index: old.id, status: old.completed }\n      ));\n      setTasks(initialTasks);\n    };\n    const tasks = JSON.parse(localStorage.getItem('tasks'));\n    if (tasks) {\n      setTasks(tasks);\n    } else {\n      fetchApi();\n    }\n  }, []);\n\n  // Save to local storage\n  useEffect(() => localStorage.setItem('tasks', JSON.stringify(tasks)), [tasks]);\n\n  return (\n    <ul id=\"todo-list\">\n      <InputTodo addTask={addTask} />\n      {tasks.map((task) => (\n        <TodoItem\n          key={task.index}\n          task={task}\n          editTask={editTask}\n          updateStatus={updateStatus}\n          deleteTask={deleteTask}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default TodoList;\n","import './App.css';\nimport TodoList from './components/todo-list';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1> To Do List </h1>\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}